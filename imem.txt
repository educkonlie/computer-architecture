# common test
# I have added code in .cpp to ignore all # line in imem.txt
####################################################################
# case for branch in lab2
# first, hardcode x20 to be 20, it will be in dead loop
# then, hardcode x20 to be 0, it will be in exit normally
# beq x0, x20, 0
# 0000000 x20 x0 000 00000 1100011
00000001
01000000
00000000
01100011
# end of instruction
11111111
11111111
11111111
11111111
# case for test ld. result: x1 == x2 == 8, x0 == 0;
# ld x1 16(x0)
# x1 will be 8  test hazard unit, specially for case of lord instruction
# 000000010000 00000 011 00001 0000011
#00000001
#00000000
#00110000
#10000011
# sub x2, x1, x3  test forward unit, normal
# 0100000 rs2 rs1 000 rd 0110011
01000000
00110000
10000001
00110011
# add x12, x2, x5
# 0000000 x5 x2 000 x12 0110011
00000000
01010001
00000110
00110011
# add x13, x6, x2
# 0000000 x2 x6 000 x13 0110011
00000000
00100011
00000110
10110011
# add x14, x2, x2
# 0000000 x2 x2 000 x14 0110011
00000000
00100001
00000111
00110011
#################################################################
# end of instruction
#11111111
#11111111
#11111111
#11111111
#######################   test forward unit, MEM & EX all write to rd
# add x1, x1, x2
# 0000000 x2 x1 000 x1 0110011
00000000
00100000
10000000
10110011
# add x1, x1, x3
# 0000000 x3 x1 000 x1 0110011
00000000
00110000
10000000
10110011
# add x1, x1, x4
# 0000000 x4 x1 000 x1 0110011
00000000
01000000
10000000
10110011
################################################################
# case for test sd,  mem[24:27] will be 8
# sd x1 24(x0)
# 0000000 00001 00000 011  11000 0100011
#00000000
#00010000
#00111100
#00100011
#################################################################
#ld x2, 20(x1)
# 000000 010100   00001 011 00010 0000011
00000001
01000000
10110001
00000011
#add x4, x2, x5
# 0000000 00101 00010 000 00100 0110011
00000000
01010001
00000010
00110011
#add x8, x2, x6
# 0000000 x6 x2 000 x8 0110011
00000000
01100001
00000100
00110011
#add x9, x4, x2
# 0000000 x2 x4 000 x9 0110011
00000000
00100010
00000100
10110011
# addi x20, x20, 20
# imm[11:0] x20 000 x20 0010011
00000001
01001010
00001010
00010011
#################################################################
# end of instruction
11111111
11111111
11111111
11111111
